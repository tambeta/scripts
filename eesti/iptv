#!/bin/bash

# IPTV frontend for the new router firmware (>=8.C.D.9). Takes the channel ID
# as argument. If the proper interface is not connected, falls back to web
# stream.
#
# Arguments:
# 
# -a             - force alternate (web) stream
# -i <interface> - specify network interface
# -c <filename>  - dump to file

IPTV_IF=enp12s0
IPTV_NET="^192.168.1."

function get_conf_field {
	egrep "^$CHID[[:space:]]" $CONFFN | awk "{print \$$1;}" | head -n1
}

function warn {
	echo $@ >&2
}

function err {
	echo $@ >&2
	exit 1
}

while getopts "ac:i:" OPT; do
        case $OPT in
                a ) ALTSTREAM=1 ;;
                c ) CAPFILE=$OPTARG ;;
				i ) IF=$OPTARG ;;
        esac
done

for i in $(seq 1 $(($OPTIND-1)))
	do shift; done

CONFFN="$(dirname $0)/../data/iptvrc"
DEFAULTPLFN="$(dirname $0)/../data/iptv.m3u"
IF=${IF-$IPTV_IF}
PLAYER=vlc
VLC_CMDLINE=""

CHID=$(awk "/^$1[[:space:]]/ {print \$1;}" $CONFFN)
URL=$(get_conf_field 2)
URL_FB=$(get_conf_field 3)
	
LOCAL_IP=$(ip a show $IF | perl -nle 'print $1 if /inet\s+((?:\d{1,3}\.?){4})/')

if [[ -z "$CHID" ]]; then
	warn "No channel ID passed, falling back to default playlist"
	URL=$DEFAULTPLFN
elif [[ -n "$ALTSTREAM" ]]; then
	warn "Web stream requested"
	URL=$URL_FB
elif [[ -z "$LOCAL_IP" ]]; then
	warn "Cannot determine local IP address for $IF, falling back to web stream"
	URL=$URL_FB
elif ! echo $LOCAL_IP | egrep -q "$IPTV_NET"; then
	warn "$IF is not on the IPTV subnet, falling back to web stream"
	URL=$URL_FB
else
	VLC_CMDLINE="--sub-track 0 --deinterlace -1 --deinterlace-mode yadif2x"
fi

shift

if [[ $CAPFILE ]]; then
	mplayer $URL -dumpstream -dumpfile $CAPFILE
else
	$PLAYER $VLC_CMDLINE $* $URL
fi

